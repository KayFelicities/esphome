substitutions:
  devicename: ir

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pw
  fast_connect: true
  ap:
    ssid: ${devicename}
    password: !secret ap_pw
captive_portal:
web_server:
  port: !secret web_port
  auth:
    username: !secret web_user
    password: !secret web_pw
api:
  password: !secret api_pw
ota:
  password: !secret ota_pw

logger:

esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp8285


remote_receiver:
  pin:
    number: GPIO14
    inverted: True
  dump: all
  on_lg:
    then:
    - lambda: |-
        if (x.data & 0x10000000) {
          id(climate_switch).publish_state(true);
        } else {
          id(climate_switch).publish_state(false);
        }
  on_raw:
    then:
    - lambda: |-
        short irCode[256] = {0}; std::string decode;
        for (int i = 0; i < x.size(); i++) {
          int isNega = 0;
          char temp[16] = {0};
          irCode[i] = (short)x[i];
          if (i == 0) {
            decode += "9000, ";
            continue;
          }
          if (i == 1) {
            decode += "-4500, ";
            continue;
          }
          if (irCode[i] < 0) {
            irCode[i] = -irCode[i];
            isNega = 1;
          }
          irCode[i] = (irCode[i] / 560 + (irCode[i] % 560 > 280 ? 1 : 0)) * 560;
          sprintf(temp, isNega ? "-%d, " : "%d, ", irCode[i]);
          decode += temp;
          
          if (i % 32 == 31) {
            ESP_LOGI("main", "raw: %s", decode.c_str());
            decode.clear();
          }
        }
        ESP_LOGI("main", "raw: %s", decode.c_str());

remote_transmitter:
  pin: GPIO4
  # Infrared remotes use a 50% carrier signal
  carrier_duty_percent: 50%

# climate:
# - platform: custom
#   lambda: |-
#     auto qundaClimate = new Qunda();
#     App.register_component(qundaClimate);
#     return {qundaClimate};
#   climates:
#     - name: "空调"

switch:
  - platform: template
    name: "空调"
    id: climate_switch
    optimistic: true
    turn_on_action:
      remote_transmitter.transmit_raw:
        carrier_frequency: 38kHz
        code: [9000, -4500, 560, -560, 560, -560, 560, -560, 560, -1680, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -1680, 560, -1680, 560, -1680, 560, -560, 560, -560, 
                560, -560, 560, -1680, 560, -1680, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -1680, 560, -560, 560, -560, 
                560, -560, 560, -560, 560, -560, 560, -1680, 560, -1680, 560, -560, 560, -560, 560, -560, 560, -560, 560, -10080]

    turn_off_action:
      remote_transmitter.transmit_raw:
        carrier_frequency: 38kHz
        code: [9000, -4500, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -1680, 560, -1680, 560, -1680, 560, -560, 560, -560, 
                560, -560, 560, -1680, 560, -1680, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -560, 560, -1680, 560, -560, 560, -560, 
                560, -560, 560, -560, 560, -560, 560, -1680, 560, -1680, 560, -560, 560, -560, 560, -560, 560, -560, 560, -10080]


sensor:
  - platform: dht
    model: DHT22
    pin: TX
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    update_interval: 30s
